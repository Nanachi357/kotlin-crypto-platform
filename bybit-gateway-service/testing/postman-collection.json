{
  "info": {
    "_postman_id": "bybit-gateway-tests",
    "name": "Bybit Gateway Error Handling Tests",
    "description": "Comprehensive error handling validation for Phase 1 - Commit 6",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Health & Basic Functionality",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response has success structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Server Time",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/bybit-time",
              "host": ["{{baseUrl}}"],
              "path": ["bybit-time"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has server time data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('result');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. Successful Market Data",
      "item": [
        {
          "name": "Valid Symbol - BTCUSDT",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "BTCUSDT"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has market data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('result');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Valid Symbol - ETHUSDC",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/ETHUSDC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "ETHUSDC"]
            }
          },
          "response": []
        },
        {
          "name": "Multiple Valid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers?symbols=BTCUSDT,ETHUSDC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDC"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Symbols (Empty List)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Validation Errors",
      "item": [
        {
          "name": "Empty Symbol",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", ""]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('path');",
                  "    pm.expect(response).to.have.property('details');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Symbol - Too Short",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/BT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "BT"]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Symbol - Special Characters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/btc-usdt",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "btc-usdt"]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Symbol - Numbers Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/123456",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "123456"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "4. Graceful Degradation",
      "item": [
        {
          "name": "Mixed Valid/Invalid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers?symbols=BTCUSDT,invalid,ETHUSDC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,invalid,ETHUSDC"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 (graceful degradation)', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains data for valid symbols', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('result');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "All Invalid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers?symbols=invalid1,invalid2,invalid3",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"],
              "query": [
                {
                  "key": "symbols",
                  "value": "invalid1,invalid2,invalid3"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 (all invalid)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "5. Exception Handler Tests",
      "item": [
        {
          "name": "Validation Error Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/validation-error",
              "host": ["{{baseUrl}}"],
              "path": ["test", "validation-error"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error code is VALIDATION_ERROR', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('VALIDATION_ERROR');",
                  "});",
                  "",
                  "pm.test('Error response structure is complete', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('path');",
                  "    pm.expect(response).to.have.property('details');",
                  "    pm.expect(response.details).to.have.property('field');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Not Found Error Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/not-found",
              "host": ["{{baseUrl}}"],
              "path": ["test", "not-found"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error code is NOT_FOUND', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('NOT_FOUND');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Timeout Error Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/timeout",
              "host": ["{{baseUrl}}"],
              "path": ["test", "timeout"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 504', function () {",
                  "    pm.response.to.have.status(504);",
                  "});",
                  "",
                  "pm.test('Error code is EXTERNAL_API_ERROR', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('EXTERNAL_API_ERROR');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unhandled Exception Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/unhandled",
              "host": ["{{baseUrl}}"],
              "path": ["test", "unhandled"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 500', function () {",
                  "    pm.response.to.have.status(500);",
                  "});",
                  "",
                  "pm.test('Error code is INTERNAL_ERROR', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('INTERNAL_ERROR');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "6. Performance Tests",
      "item": [
        {
          "name": "Response Time Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "BTCUSDT"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}
