{
  "info": {
    "_postman_id": "bybit-gateway-comprehensive",
    "name": "Bybit Gateway - Comprehensive Tests",
    "description": "Complete test suite for Bybit Gateway Service - Phase 1 (Commits 6-8) including error handling, batch API, performance, logging, and edge cases",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Health & Basic Functionality",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is JSON', function () {",
                  "    pm.response.to.be.json;",
                  "});",
                  "",
                  "pm.test('Response has success structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    pm.expect(response.success).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Root Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/",
              "host": ["{{baseUrl}}"],
              "path": [""]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Server Time",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/bybit-time",
              "host": ["{{baseUrl}}"],
              "path": ["bybit-time"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has server time data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('result');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "2. Market Data (Single/Multiple)",
      "item": [
        {
          "name": "Valid Symbol - BTCUSDT",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "BTCUSDT"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has market data', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('result');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Valid Symbol - ETHUSDC",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/ETHUSDC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "ETHUSDC"]
            }
          },
          "response": []
        },
        {
          "name": "Multiple Valid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers?symbols=BTCUSDT,ETHUSDC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDC"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "All Symbols (Empty List)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "3. Error Handling & Validation",
      "item": [
        {
          "name": "Empty Symbol",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", ""]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error response structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('timestamp');",
                  "    pm.expect(response).to.have.property('path');",
                  "    pm.expect(response).to.have.property('details');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Symbol - Too Short",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/BT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "BT"]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Symbol - Special Characters",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/btc-usdt",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "btc-usdt"]
            }
          },
          "response": []
        },
        {
          "name": "Invalid Symbol - Numbers Only",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/123456",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "123456"]
            }
          },
          "response": []
        },
        {
          "name": "Mixed Valid/Invalid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers?symbols=BTCUSDT,invalid,ETHUSDC",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,invalid,ETHUSDC"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200 (graceful degradation)', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response contains data for valid symbols', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('success');",
                  "    if (response.success) {",
                  "        pm.expect(response.data).to.have.property('result');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "All Invalid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/tickers?symbols=invalid1,invalid2,invalid3",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "tickers"],
              "query": [
                {
                  "key": "symbols",
                  "value": "invalid1,invalid2,invalid3"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400 (all invalid)', function () {",
                  "    pm.response.to.have.status(400);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Validation Error Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/validation-error",
              "host": ["{{baseUrl}}"],
              "path": ["test", "validation-error"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 400', function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test('Error code is VALIDATION_ERROR', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('VALIDATION_ERROR');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Not Found Error Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/not-found",
              "host": ["{{baseUrl}}"],
              "path": ["test", "not-found"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test('Error code is NOT_FOUND', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('NOT_FOUND');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Timeout Error Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/timeout",
              "host": ["{{baseUrl}}"],
              "path": ["test", "timeout"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 504', function () {",
                  "    pm.response.to.have.status(504);",
                  "});",
                  "",
                  "pm.test('Error code is EXTERNAL_API_ERROR', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('EXTERNAL_API_ERROR');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Unhandled Exception Endpoint",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/test/unhandled",
              "host": ["{{baseUrl}}"],
              "path": ["test", "unhandled"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 500', function () {",
                  "    pm.response.to.have.status(500);",
                  "});",
                  "",
                  "pm.test('Error code is INTERNAL_ERROR', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.error).to.eql('INTERNAL_ERROR');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "4. Batch API - Core Features",
      "item": [
        {
          "name": "Single Symbol (Single Strategy)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has prices array', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('prices');",
                  "    pm.expect(response.prices).to.be.an('array');",
                  "});",
                  "",
                  "pm.test('Strategy is single', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.strategy).to.equal('single');",
                  "});",
                  "",
                  "pm.test('Single symbol performance', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Two Symbols (Parallel Strategy)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Strategy is parallel', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.strategy).to.equal('parallel');",
                  "});",
                  "",
                  "pm.test('Parallel performance', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Multiple Symbols (Batch Strategy)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Strategy is batch', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.strategy).to.equal('batch');",
                  "});",
                  "",
                  "pm.test('Batch performance', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(4000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "SPOT Category Explicit",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT&category=SPOT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT"
                },
                {
                  "key": "category",
                  "value": "SPOT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Category is SPOT', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.category).to.equal('SPOT');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "LINEAR Category Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT&category=LINEAR",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT"
                },
                {
                  "key": "category",
                  "value": "LINEAR"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Category is LINEAR', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.category).to.equal('LINEAR');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Category (Default to SPOT)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT&category=INVALID",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT"
                },
                {
                  "key": "category",
                  "value": "INVALID"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Defaults to SPOT category', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.category).to.equal('SPOT');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Empty Symbols (Defaults)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Uses default symbols', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.prices).to.be.an('array');",
                  "    pm.expect(response.prices.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "5. Batch API - Performance & Edge Cases",
      "item": [
        {
          "name": "Error Handling - Invalid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=INVALID1,INVALID2,BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "INVALID1,INVALID2,BTCUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Has errors for invalid symbols', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.errors).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Valid symbols still returned', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.prices).to.be.an('array');",
                  "    pm.expect(response.prices.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Edge Case - Very Long Symbol List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT,AVAXUSDT,UNIUSDT,LTCUSDT,BCHUSDT,ETCUSDT,ATOMUSDT,NEARUSDT,FTMUSDT,ALGOUSDT,ICPUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT,AVAXUSDT,UNIUSDT,LTCUSDT,BCHUSDT,ETCUSDT,ATOMUSDT,NEARUSDT,FTMUSDT,ALGOUSDT,ICPUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Strategy is batch for large list', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.strategy).to.equal('batch');",
                  "});",
                  "",
                  "pm.test('Large list performance', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Edge Case - Duplicate Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,BTCUSDT,ETHUSDT,ETHUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,BTCUSDT,ETHUSDT,ETHUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Handles duplicates gracefully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.prices).to.be.an('array');",
                  "    pm.expect(response.prices.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Edge Case - Mixed Valid/Invalid Symbols",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,INVALID1,ETHUSDT,INVALID2,ADAUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,INVALID1,ETHUSDT,INVALID2,ADAUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Graceful degradation works', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.prices).to.be.an('array');",
                  "    pm.expect(response.prices.length).to.be.greaterThan(0);",
                  "    pm.expect(response.errors).to.not.be.empty;",
                  "});",
                  "",
                  "pm.test('Success rate calculation', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.successRate).to.be.a('number');",
                  "    pm.expect(response.metadata.successRate).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Performance Test - Batch vs Individual",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Batch is faster than individual requests', function () {",
                  "    // This test assumes batch should be faster than 5 individual requests",
                  "    // Individual requests would take ~1000ms each = 5000ms total",
                  "    // Batch should be significantly faster",
                  "    pm.expect(pm.response.responseTime).to.be.below(4000);",
                  "});",
                  "",
                  "pm.test('All requested symbols returned', function () {",
                  "    const response = pm.response.json();",
                  "    const requestedSymbols = ['BTCUSDT', 'ETHUSDT', 'ADAUSDT', 'BNBUSDT', 'XRPUSDT'];",
                  "    const returnedSymbols = response.prices.map(p => p.symbol);",
                  "    requestedSymbols.forEach(symbol => {",
                  "        pm.expect(returnedSymbols).to.include(symbol);",
                  "    });",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Response Structure Validation",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has correct structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('prices');",
                  "    pm.expect(response).to.have.property('metadata');",
                  "    pm.expect(response).to.have.property('notFound');",
                  "    pm.expect(response).to.have.property('errors');",
                  "});",
                  "",
                  "pm.test('Metadata has all required fields', function () {",
                  "    const response = pm.response.json();",
                  "    const metadata = response.metadata;",
                  "    pm.expect(metadata).to.have.property('strategy');",
                  "    pm.expect(metadata).to.have.property('category');",
                  "    pm.expect(metadata).to.have.property('requestTimeMs');",
                  "    pm.expect(metadata).to.have.property('successCount');",
                  "    pm.expect(metadata).to.have.property('notFoundCount');",
                  "    pm.expect(metadata).to.have.property('errorCount');",
                  "    pm.expect(metadata).to.have.property('successRate');",
                  "});",
                  "",
                  "pm.test('Price items have required fields', function () {",
                  "    const response = pm.response.json();",
                  "    if (response.prices.length > 0) {",
                  "        const price = response.prices[0];",
                  "        pm.expect(price).to.have.property('symbol');",
                  "        pm.expect(price).to.have.property('lastPrice');",
                  "        pm.expect(price).to.have.property('price24hPcnt');",
                  "        pm.expect(price).to.have.property('volume24h');",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "6. Stress Testing & Concurrency",
      "item": [
        {
          "name": "Concurrency Test - Multiple Requests",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Concurrent request handled', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response is consistent', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.prices).to.be.an('array');",
                  "    pm.expect(response.metadata.successCount).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Stress Test - Large Symbol List",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT,AVAXUSDT,UNIUSDT,LTCUSDT,BCHUSDT,ETCUSDT,ATOMUSDT,NEARUSDT,FTMUSDT,ALGOUSDT,ICPUSDT,TRXUSDT,ETCUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT,AVAXUSDT,UNIUSDT,LTCUSDT,BCHUSDT,ETCUSDT,ATOMUSDT,NEARUSDT,FTMUSDT,ALGOUSDT,ICPUSDT,TRXUSDT,ETCUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Stress test performance', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(8000);",
                  "});",
                  "",
                  "pm.test('Handles large request gracefully', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.metadata.strategy).to.equal('batch');",
                  "    pm.expect(response.prices).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Response Time Test (Legacy)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "BTCUSDT"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response time is less than 1000ms', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "7. Logging & Monitoring Tests",
      "item": [
        {
          "name": "Logging - Performance Monitoring",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Performance monitoring test', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test('Response structure validation', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('prices');",
                  "    pm.expect(response).to.have.property('metadata');",
                  "    pm.expect(response.metadata).to.have.property('strategy');",
                  "});",
                  "",
                  "// Manual verification: Check logs for performance warnings",
                  "pm.test('Logging verification note', function () {",
                  "    pm.expect(true).to.be.true;",
                  "    console.log('Check logs for performance monitoring entries');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logging - Error Handling",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/ticker?symbol=INVALID_SYMBOL_12345",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "ticker"],
              "query": [
                {
                  "key": "symbol",
                  "value": "INVALID_SYMBOL_12345"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Error response structure', function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.have.property('code');",
                  "    pm.expect(response.error.code).to.equal('VALIDATION_ERROR');",
                  "});",
                  "",
                  "// Manual verification: Check error logs",
                  "pm.test('Error logging verification', function () {",
                  "    pm.expect(true).to.be.true;",
                  "    console.log('Check error logs for structured error information');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logging - Call Logging",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "X-Request-ID",
                "value": "test-request-123"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/market/ticker?symbol=BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "ticker"],
              "query": [
                {
                  "key": "symbol",
                  "value": "BTCUSDT"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Successful request logging', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "pm.test('Request ID tracking', function () {",
                  "    pm.expect(pm.request.headers.get('X-Request-ID')).to.equal('test-request-123');",
                  "});",
                  "",
                  "// Manual verification: Check call logs",
                  "pm.test('Call logging verification', function () {",
                  "    pm.expect(true).to.be.true;",
                  "    console.log('Check call logs for request tracking');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Logging - Health Check (Should Not Log)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check response', function () {",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});",
                  "",
                  "// Manual verification: Health checks should not appear in call logs",
                  "pm.test('Health check logging verification', function () {",
                  "    pm.expect(true).to.be.true;",
                  "    console.log('Verify health checks are filtered from call logs');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "8. Universal Exchange API Tests (Commit 2)",
      "item": [
        {
          "name": "Universal API Info",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market"]
            }
          },
          "response": []
        },
        {
          "name": "Single Price - Universal Format",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market/BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market", "BTCUSDT"]
            }
          },
          "response": []
        },
        {
          "name": "Batch Prices - Universal Format",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market/batch?symbols=BTCUSDT,ETHUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Large Batch - Universal Format",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Error Handling - Invalid Symbol",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market/INVALID",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market", "INVALID"]
            }
          },
          "response": []
        },
        {
          "name": "Error Handling - Mixed Valid/Invalid",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market/batch?symbols=BTCUSDT,INVALID,ETHUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,INVALID,ETHUSDT"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Backward Compatibility - Old Format",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/market/BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "market", "BTCUSDT"]
            }
          },
          "response": []
        },
        {
          "name": "Performance Test - Single",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market/BTCUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market", "BTCUSDT"]
            }
          },
          "response": []
        },
        {
          "name": "Performance Test - Batch",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/v2/market/batch?symbols=BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v2", "market", "batch"],
              "query": [
                {
                  "key": "symbols",
                  "value": "BTCUSDT,ETHUSDT,ADAUSDT,BNBUSDT,XRPUSDT,DOGEUSDT,MATICUSDT,SOLUSDT,DOTUSDT,LINKUSDT"
                }
              ]
            }
          },
          "response": []
        }
      ]
    }
  ]
}
